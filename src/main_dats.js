/*
**
** The JavaScript code is generated by atscc2js
** The starting compilation time is: 2017-10-19: 16h:50m
**
*/

var subtree_rightup

var subtree_next

var subtree_insert

var kill

var enter

var entry

var reduce

var producable

function
__patsfun_16__closurerize(env0)
{
  return [function(cenv, arg0) { return __patsfun_16(cenv[1], arg0); }, env0];
}


function
__patsfun_18__closurerize(env0)
{
  return [function(cenv, arg0) { return __patsfun_18(cenv[1], arg0); }, env0];
}


function
__patsfun_20__closurerize()
{
  return [function(cenv, arg0) { return __patsfun_20(arg0); }];
}


function
__patsfun_22__closurerize()
{
  return [function(cenv, arg0) { return __patsfun_22(arg0); }];
}


function
__patsfun_24__closurerize()
{
  return [function(cenv, arg0) { return __patsfun_24(arg0); }];
}


function
__patsfun_26__closurerize()
{
  return [function(cenv, arg0) { return __patsfun_26(arg0); }];
}


function
__patsfun_28__closurerize()
{
  return [function(cenv, arg0) { return __patsfun_28(arg0); }];
}


function
__patsfun_30__closurerize()
{
  return [function(cenv, arg0) { return __patsfun_30(arg0); }];
}


function
__patsfun_32__closurerize()
{
  return [function(cenv, arg0) { return __patsfun_32(arg0); }];
}


function
__patsfun_34__closurerize(env0)
{
  return [function(cenv, arg0) { return __patsfun_34(cenv[1], arg0); }, env0];
}


function
__patsfun_38__closurerize(env0, env1)
{
  return [function(cenv, arg0, arg1) { return __patsfun_38(cenv[1], cenv[2], arg0, arg1); }, env0, env1];
}


function
aux_40__closurerize(env0)
{
  return [function(cenv, arg0, arg1, arg2) { return aux_40(cenv[1], arg0, arg1, arg2); }, env0];
}


function
__patsfun_43__closurerize()
{
  return [function(cenv, arg0) { return __patsfun_43(arg0); }];
}


function
__patsfun_55__closurerize()
{
  return [function(cenv, arg0, arg1) { return __patsfun_55(arg0, arg1); }];
}


function
__patsfun_57__closurerize(env0)
{
  return [function(cenv, arg0, arg1) { return __patsfun_57(cenv[1], arg0, arg1); }, env0];
}


function
__patsfun_58__closurerize()
{
  return [function(cenv, arg0, arg1) { return __patsfun_58(arg0, arg1); }];
}


function
tree_hole()
{
//
// knd = 0
  var tmpret0
  var tmp1
  var tmp2
  var tmplab, tmplab_js
//
  // __patsflab_hole
  tmp1 = 0;
  tmp2 = null;
  tmpret0 = tree_fork(tmp1, tmp2);
  return tmpret0;
} // end-of-function


function
label_is_hole(arg0)
{
//
// knd = 0
  var tmpret3
  var tmplab, tmplab_js
//
  // __patsflab_label_is_hole
  // ATScaseofseq_beg
  tmplab_js = 1;
  while(true) {
    tmplab = tmplab_js; tmplab_js = 0;
    switch(tmplab) {
      // ATSbranchseq_beg
      case 1: // __atstmplab0
      if(!ATSCKpat_con0(arg0, 0)) { tmplab_js = 3; break; }
      case 2: // __atstmplab1
      tmpret3 = true;
      break;
      // ATSbranchseq_end
      // ATSbranchseq_beg
      case 3: // __atstmplab2
      tmpret3 = false;
      break;
      // ATSbranchseq_end
    } // end-of-switch
    if (tmplab_js === 0) break;
  } // endwhile
  // ATScaseofseq_end
  return tmpret3;
} // end-of-function


function
assl(arg0)
{
//
// knd = 0
  var tmpret4
  var tmplab, tmplab_js
//
  // __patsflab_assl
  // ATScaseofseq_beg
  tmplab_js = 1;
  while(true) {
    tmplab = tmplab_js; tmplab_js = 0;
    switch(tmplab) {
      // ATSbranchseq_beg
      case 1: // __atstmplab3
      if(!ATSCKpat_con0(arg0, 2)) { tmplab_js = 3; break; }
      case 2: // __atstmplab4
      tmpret4 = true;
      break;
      // ATSbranchseq_end
      // ATSbranchseq_beg
      case 3: // __atstmplab5
      if(!ATSCKpat_con0(arg0, 3)) { tmplab_js = 5; break; }
      case 4: // __atstmplab6
      tmpret4 = true;
      break;
      // ATSbranchseq_end
      // ATSbranchseq_beg
      case 5: // __atstmplab7
      if(!ATSCKpat_con0(arg0, 8)) { tmplab_js = 7; break; }
      case 6: // __atstmplab8
      tmpret4 = true;
      break;
      // ATSbranchseq_end
      // ATSbranchseq_beg
      case 7: // __atstmplab9
      tmpret4 = false;
      break;
      // ATSbranchseq_end
    } // end-of-switch
    if (tmplab_js === 0) break;
  } // endwhile
  // ATScaseofseq_end
  return tmpret4;
} // end-of-function


function
prec(arg0)
{
//
// knd = 0
  var tmpret5
  var tmplab, tmplab_js
//
  // __patsflab_prec
  // ATScaseofseq_beg
  tmplab_js = 1;
  while(true) {
    tmplab = tmplab_js; tmplab_js = 0;
    switch(tmplab) {
      // ATSbranchseq_beg
      case 1: // __atstmplab10
      if(!ATSCKpat_con0(arg0, 8)) { tmplab_js = 3; break; }
      case 2: // __atstmplab11
      tmpret5 = 1500;
      break;
      // ATSbranchseq_end
      // ATSbranchseq_beg
      case 3: // __atstmplab12
      if(!ATSCKpat_con0(arg0, 1)) { tmplab_js = 5; break; }
      case 4: // __atstmplab13
      tmpret5 = 1000;
      break;
      // ATSbranchseq_end
      // ATSbranchseq_beg
      case 5: // __atstmplab14
      if(!ATSCKpat_con0(arg0, 2)) { tmplab_js = 7; break; }
      case 6: // __atstmplab15
      tmpret5 = 100;
      break;
      // ATSbranchseq_end
      // ATSbranchseq_beg
      case 7: // __atstmplab16
      if(!ATSCKpat_con0(arg0, 3)) { tmplab_js = 9; break; }
      case 8: // __atstmplab17
      tmpret5 = 120;
      break;
      // ATSbranchseq_end
      // ATSbranchseq_beg
      case 9: // __atstmplab18
      if(!ATSCKpat_con0(arg0, 7)) { tmplab_js = 11; break; }
      case 10: // __atstmplab19
      tmpret5 = 50;
      break;
      // ATSbranchseq_end
      // ATSbranchseq_beg
      case 11: // __atstmplab20
      if(!ATSCKpat_con0(arg0, 6)) { tmplab_js = 13; break; }
      case 12: // __atstmplab21
      tmpret5 = ats2jspre_neg_int1(1);
      break;
      // ATSbranchseq_end
      // ATSbranchseq_beg
      case 13: // __atstmplab22
      tmpret5 = 0;
      break;
      // ATSbranchseq_end
    } // end-of-switch
    if (tmplab_js === 0) break;
  } // endwhile
  // ATScaseofseq_end
  return tmpret5;
} // end-of-function


function
template(arg0)
{
//
// knd = 0
  var tmpret6
  var tmp7
  var tmp8
  var tmp9
  var tmp10
  var tmp11
  var tmp12
  var tmp13
  var tmp14
  var tmp15
  var tmp16
  var tmp17
  var tmp18
  var tmp19
  var tmp20
  var tmp21
  var tmp22
  var tmp23
  var tmp24
  var tmp25
  var tmp26
  var tmp27
  var tmp28
  var tmp29
  var tmp30
  var tmp31
  var tmp32
  var tmp33
  var tmp34
  var tmp35
  var tmp36
  var tmp37
  var tmp38
  var tmp39
  var tmp40
  var tmp41
  var tmp42
  var tmp43
  var tmp44
  var tmplab, tmplab_js
//
  // __patsflab_template
  // ATScaseofseq_beg
  tmplab_js = 1;
  while(true) {
    tmplab = tmplab_js; tmplab_js = 0;
    switch(tmplab) {
      // ATSbranchseq_beg
      case 1: // __atstmplab23
      if(!ATSCKpat_con0(arg0, 8)) { tmplab_js = 3; break; }
      case 2: // __atstmplab24
      tmp7 = 8;
      tmp9 = tree_hole();
      tmp11 = tree_hole();
      tmp12 = null;
      tmp10 = [tmp11, tmp12];
      tmp8 = [tmp9, tmp10];
      tmpret6 = tree_fork(tmp7, tmp8);
      break;
      // ATSbranchseq_end
      // ATSbranchseq_beg
      case 3: // __atstmplab25
      if(!ATSCKpat_con0(arg0, 1)) { tmplab_js = 5; break; }
      case 4: // __atstmplab26
      tmp13 = 1;
      tmp15 = tree_hole();
      tmp17 = tree_hole();
      tmp19 = tree_hole();
      tmp20 = null;
      tmp18 = [tmp19, tmp20];
      tmp16 = [tmp17, tmp18];
      tmp14 = [tmp15, tmp16];
      tmpret6 = tree_fork(tmp13, tmp14);
      break;
      // ATSbranchseq_end
      // ATSbranchseq_beg
      case 5: // __atstmplab27
      if(!ATSCKpat_con0(arg0, 6)) { tmplab_js = 7; break; }
      case 6: // __atstmplab28
      tmp21 = 6;
      tmp23 = tree_hole();
      tmp25 = tree_hole();
      tmp26 = null;
      tmp24 = [tmp25, tmp26];
      tmp22 = [tmp23, tmp24];
      tmpret6 = tree_fork(tmp21, tmp22);
      break;
      // ATSbranchseq_end
      // ATSbranchseq_beg
      case 7: // __atstmplab29
      if(!ATSCKpat_con0(arg0, 2)) { tmplab_js = 9; break; }
      case 8: // __atstmplab30
      tmp27 = 2;
      tmp29 = tree_hole();
      tmp31 = tree_hole();
      tmp32 = null;
      tmp30 = [tmp31, tmp32];
      tmp28 = [tmp29, tmp30];
      tmpret6 = tree_fork(tmp27, tmp28);
      break;
      // ATSbranchseq_end
      // ATSbranchseq_beg
      case 9: // __atstmplab31
      if(!ATSCKpat_con0(arg0, 3)) { tmplab_js = 11; break; }
      case 10: // __atstmplab32
      tmp33 = 3;
      tmp35 = tree_hole();
      tmp37 = tree_hole();
      tmp38 = null;
      tmp36 = [tmp37, tmp38];
      tmp34 = [tmp35, tmp36];
      tmpret6 = tree_fork(tmp33, tmp34);
      break;
      // ATSbranchseq_end
      // ATSbranchseq_beg
      case 11: // __atstmplab33
      if(!ATSCKpat_con0(arg0, 7)) { tmplab_js = 13; break; }
      case 12: // __atstmplab34
      tmp39 = 7;
      tmp41 = tree_hole();
      tmp43 = tree_hole();
      tmp44 = null;
      tmp42 = [tmp43, tmp44];
      tmp40 = [tmp41, tmp42];
      tmpret6 = tree_fork(tmp39, tmp40);
      break;
      // ATSbranchseq_end
      // ATSbranchseq_beg
      case 13: // __atstmplab35
      tmpret6 = tree_atom(arg0);
      break;
      // ATSbranchseq_end
    } // end-of-switch
    if (tmplab_js === 0) break;
  } // endwhile
  // ATScaseofseq_end
  return tmpret6;
} // end-of-function


function
print_label(arg0)
{
//
// knd = 0
  var tmp46
  var tmp47
  var tmplab, tmplab_js
//
  // __patsflab_print_label
  // ATScaseofseq_beg
  tmplab_js = 1;
  while(true) {
    tmplab = tmplab_js; tmplab_js = 0;
    switch(tmplab) {
      // ATSbranchseq_beg
      case 1: // __atstmplab36
      if(!ATSCKpat_con0(arg0, 0)) { tmplab_js = 3; break; }
      case 2: // __atstmplab37
      ats2jspre_print_string("hole");
      break;
      // ATSbranchseq_end
      // ATSbranchseq_beg
      case 3: // __atstmplab38
      if(!ATSCKpat_con0(arg0, 1)) { tmplab_js = 5; break; }
      case 4: // __atstmplab39
      ats2jspre_print_string("if");
      break;
      // ATSbranchseq_end
      // ATSbranchseq_beg
      case 5: // __atstmplab40
      if(!ATSCKpat_con0(arg0, 2)) { tmplab_js = 7; break; }
      case 6: // __atstmplab41
      ats2jspre_print_string("add");
      break;
      // ATSbranchseq_end
      // ATSbranchseq_beg
      case 7: // __atstmplab42
      if(!ATSCKpat_con0(arg0, 3)) { tmplab_js = 9; break; }
      case 8: // __atstmplab43
      ats2jspre_print_string("mul");
      break;
      // ATSbranchseq_end
      // ATSbranchseq_beg
      case 9: // __atstmplab44
      if(!ATSCKpat_con1(arg0, 4)) { tmplab_js = 11; break; }
      case 10: // __atstmplab45
      tmp46 = arg0[1];
      ats2jspre_print_string("var(");
      ats2jspre_print_string(tmp46);
      ats2jspre_print_string(")");
      break;
      // ATSbranchseq_end
      // ATSbranchseq_beg
      case 11: // __atstmplab46
      if(!ATSCKpat_con1(arg0, 5)) { tmplab_js = 13; break; }
      case 12: // __atstmplab47
      tmp47 = arg0[1];
      ats2jspre_print_string("const(");
      ats2jspre_print_int(tmp47);
      ats2jspre_print_string(")");
      break;
      // ATSbranchseq_end
      // ATSbranchseq_beg
      case 13: // __atstmplab48
      if(!ATSCKpat_con0(arg0, 6)) { tmplab_js = 15; break; }
      case 14: // __atstmplab49
      ats2jspre_print_string("lam");
      break;
      // ATSbranchseq_end
      // ATSbranchseq_beg
      case 15: // __atstmplab50
      if(!ATSCKpat_con0(arg0, 7)) { tmplab_js = 17; break; }
      case 16: // __atstmplab51
      ats2jspre_print_string("annot");
      break;
      // ATSbranchseq_end
      // ATSbranchseq_beg
      case 17: // __atstmplab52
      case 18: // __atstmplab53
      ats2jspre_print_string("app");
      break;
      // ATSbranchseq_end
    } // end-of-switch
    if (tmplab_js === 0) break;
  } // endwhile
  // ATScaseofseq_end
  return/*_void*/;
} // end-of-function


function
eq_label_label(arg0, arg1)
{
//
// knd = 0
  var tmpret52
  var tmp53
  var tmp54
  var tmp55
  var tmp56
  var tmp57
  var tmp58
  var tmplab, tmplab_js
//
  // __patsflab_eq_label_label
  // ATScaseofseq_beg
  tmplab_js = 1;
  while(true) {
    tmplab = tmplab_js; tmplab_js = 0;
    switch(tmplab) {
      // ATSbranchseq_beg
      case 1: // __atstmplab54
      if(!ATSCKpat_con0(arg0, 0)) { tmplab_js = 4; break; }
      case 2: // __atstmplab55
      if(!ATSCKpat_con0(arg1, 0)) { tmplab_js = 28; break; }
      case 3: // __atstmplab56
      tmpret52 = true;
      break;
      // ATSbranchseq_end
      // ATSbranchseq_beg
      case 4: // __atstmplab57
      if(!ATSCKpat_con0(arg0, 1)) { tmplab_js = 7; break; }
      case 5: // __atstmplab58
      if(!ATSCKpat_con0(arg1, 1)) { tmplab_js = 28; break; }
      case 6: // __atstmplab59
      tmpret52 = true;
      break;
      // ATSbranchseq_end
      // ATSbranchseq_beg
      case 7: // __atstmplab60
      if(!ATSCKpat_con0(arg0, 2)) { tmplab_js = 10; break; }
      case 8: // __atstmplab61
      if(!ATSCKpat_con0(arg1, 2)) { tmplab_js = 28; break; }
      case 9: // __atstmplab62
      tmpret52 = true;
      break;
      // ATSbranchseq_end
      // ATSbranchseq_beg
      case 10: // __atstmplab63
      if(!ATSCKpat_con0(arg0, 3)) { tmplab_js = 13; break; }
      case 11: // __atstmplab64
      if(!ATSCKpat_con0(arg1, 3)) { tmplab_js = 28; break; }
      case 12: // __atstmplab65
      tmpret52 = true;
      break;
      // ATSbranchseq_end
      // ATSbranchseq_beg
      case 13: // __atstmplab66
      if(!ATSCKpat_con1(arg0, 4)) { tmplab_js = 16; break; }
      case 14: // __atstmplab67
      if(!ATSCKpat_con1(arg1, 4)) { tmplab_js = 28; break; }
      case 15: // __atstmplab68
      tmp53 = arg0[1];
      tmp54 = arg1[1];
      tmp57 = ats2jspre_eq_string_string(tmp53, tmp54);
      if(!ATSCKpat_bool(tmp57, true)) { tmplab_js = 28; break; }
      tmpret52 = true;
      break;
      // ATSbranchseq_end
      // ATSbranchseq_beg
      case 16: // __atstmplab69
      if(!ATSCKpat_con1(arg0, 5)) { tmplab_js = 19; break; }
      case 17: // __atstmplab70
      if(!ATSCKpat_con1(arg1, 5)) { tmplab_js = 28; break; }
      case 18: // __atstmplab71
      tmp55 = arg0[1];
      tmp56 = arg1[1];
      tmp58 = ats2jspre_eq_int0_int0(tmp55, tmp56);
      if(!ATSCKpat_bool(tmp58, true)) { tmplab_js = 28; break; }
      tmpret52 = true;
      break;
      // ATSbranchseq_end
      // ATSbranchseq_beg
      case 19: // __atstmplab72
      if(!ATSCKpat_con0(arg0, 6)) { tmplab_js = 22; break; }
      case 20: // __atstmplab73
      if(!ATSCKpat_con0(arg1, 6)) { tmplab_js = 28; break; }
      case 21: // __atstmplab74
      tmpret52 = true;
      break;
      // ATSbranchseq_end
      // ATSbranchseq_beg
      case 22: // __atstmplab75
      if(!ATSCKpat_con0(arg0, 7)) { tmplab_js = 25; break; }
      case 23: // __atstmplab76
      if(!ATSCKpat_con0(arg1, 7)) { tmplab_js = 28; break; }
      case 24: // __atstmplab77
      tmpret52 = true;
      break;
      // ATSbranchseq_end
      // ATSbranchseq_beg
      case 25: // __atstmplab78
      if(!ATSCKpat_con0(arg0, 8)) { tmplab_js = 28; break; }
      case 26: // __atstmplab79
      if(!ATSCKpat_con0(arg1, 8)) { tmplab_js = 28; break; }
      case 27: // __atstmplab80
      tmpret52 = true;
      break;
      // ATSbranchseq_end
      // ATSbranchseq_beg
      case 28: // __atstmplab81
      tmpret52 = false;
      break;
      // ATSbranchseq_end
    } // end-of-switch
    if (tmplab_js === 0) break;
  } // endwhile
  // ATScaseofseq_end
  return tmpret52;
} // end-of-function


function
__patsfun_7(arg0)
{
//
// knd = 0
  var tmpret59
  var tmp60
  var tmp61
  var tmp62
  var tmp63
  var tmplab, tmplab_js
//
  // __patsflab___patsfun_7
  tmp61 = subtree_topmost(arg0);
  if(tmp61) {
    tmp60 = true;
  } else {
    tmp62 = subtree_rightmost(arg0);
    tmp60 = ats2jspre_neg_bool0(tmp62);
  } // endif
  if(tmp60) {
    tmpret59 = subtree_right(arg0);
  } else {
    tmp63 = subtree_up(arg0);
    tmpret59 = subtree_rightup(tmp63);
  } // endif
  return tmpret59;
} // end-of-function


function
__patsfun_8(arg0)
{
//
// knd = 0
  var tmpret64
  var tmp65
  var tmplab, tmplab_js
//
  // __patsflab___patsfun_8
  tmp65 = subtree_bottommost(arg0);
  if(tmp65) {
    tmpret64 = subtree_rightup(arg0);
  } else {
    tmpret64 = subtree_down(arg0);
  } // endif
  return tmpret64;
} // end-of-function


function
__patsfun_9(arg0, arg1)
{
//
// knd = 0
  var tmpret66
  var tmp67
  var tmplab, tmplab_js
//
  // __patsflab___patsfun_9
  tmp67 = template(arg0);
  tmpret66 = subtree_treeinsert(tmp67, arg1);
  return tmpret66;
} // end-of-function


function
__patsfun_10(arg0)
{
//
// knd = 0
  var tmpret68
  var tmp69
  var tmplab, tmplab_js
//
  // __patsflab___patsfun_10
  tmp69 = tree_hole();
  tmpret68 = subtree_replace(tmp69, arg0);
  return tmpret68;
} // end-of-function


function
__patsfun_11(arg0, arg1)
{
//
// knd = 0
  var tmpret70
  var tmp71
  var tmplab, tmplab_js
//
  // __patsflab___patsfun_11
  tmp71 = subtree_insert(arg0, arg1);
  tmpret70 = subtree_next_such_that(subtree_at_hole, tmp71);
  return tmpret70;
} // end-of-function


function
__patsfun_12(arg0, arg1)
{
//
// knd = 0
  var tmpret72
  var tmp76
  var tmplab, tmplab_js
//
  // __patsflab___patsfun_12
  ats2jspre_print_string("entry with label: ");
  print_label(arg0);
  ats2jspre_print_newline();
  tmp76 = reduce(arg0, arg1);
  tmpret72 = enter(arg0, tmp76);
  return tmpret72;
} // end-of-function


function
__patsfun_13(arg0, arg1)
{
//
// knd = 0
  var tmpret77
  var tmp78
  var tmp83
  var tmplab, tmplab_js
//
  // __patsflab___patsfun_13
  tmp78 = irreducible(arg0, arg1);
  if(tmp78) {
    ats2jspre_print_string("irreducible");
    ats2jspre_print_newline();
    tmpret77 = arg1;
  } else {
    ats2jspre_print_string("moving up, retrying");
    ats2jspre_print_newline();
    tmp83 = subtree_up(arg1);
    tmpret77 = reduce(arg0, tmp83);
  } // endif
  return tmpret77;
} // end-of-function


function
__patsfun_14(arg0, arg1)
{
//
// knd = 0
  var tmpret84
  var tmp85
  var tmp86
  var tmp87
  var tmp88
  var tmplab, tmplab_js
//
  // __patsflab___patsfun_14
  tmp86 = eq_label_label(arg1, arg0);
  if(tmp86) {
    tmp85 = assl(arg1);
  } else {
    tmp85 = false;
  } // endif
  if(tmp85) {
    tmpret84 = true;
  } else {
    tmp87 = prec(arg1);
    tmp88 = prec(arg0);
    tmpret84 = ats2jspre_gt_int0_int0(tmp87, tmp88);
  } // endif
  return tmpret84;
} // end-of-function


function
subtree1_enter(arg0, arg1)
{
//
// knd = 0
  var tmpret89
  var tmplab, tmplab_js
//
  // __patsflab_enter1
  tmpret89 = subtree1_lift(arg1, __patsfun_16__closurerize(arg0));
  return tmpret89;
} // end-of-function


function
__patsfun_16(env0, arg0)
{
//
// knd = 0
  var tmpret90
  var tmplab, tmplab_js
//
  // __patsflab___patsfun_16
  tmpret90 = enter(env0, arg0);
  return tmpret90;
} // end-of-function


function
subtree1_entry(arg0, arg1)
{
//
// knd = 0
  var tmpret91
  var tmplab, tmplab_js
//
  // __patsflab_entry1
  tmpret91 = subtree1_lift(arg1, __patsfun_18__closurerize(arg0));
  return tmpret91;
} // end-of-function


function
__patsfun_18(env0, arg0)
{
//
// knd = 0
  var tmpret92
  var tmplab, tmplab_js
//
  // __patsflab___patsfun_18
  tmpret92 = entry(env0, arg0);
  return tmpret92;
} // end-of-function


function
subtree1_left(arg0)
{
//
// knd = 0
  var tmpret93
  var tmplab, tmplab_js
//
  // __patsflab_left1
  tmpret93 = subtree1_lift(arg0, __patsfun_20__closurerize());
  return tmpret93;
} // end-of-function


function
__patsfun_20(arg0)
{
//
// knd = 0
  var tmpret94
  var tmplab, tmplab_js
//
  // __patsflab___patsfun_20
  tmpret94 = subtree_left(arg0);
  return tmpret94;
} // end-of-function


function
subtree1_first_child(arg0)
{
//
// knd = 0
  var tmpret95
  var tmplab, tmplab_js
//
  // __patsflab_first_child1
  tmpret95 = subtree1_lift(arg0, __patsfun_22__closurerize());
  return tmpret95;
} // end-of-function


function
__patsfun_22(arg0)
{
//
// knd = 0
  var tmpret96
  var tmplab, tmplab_js
//
  // __patsflab___patsfun_22
  tmpret96 = subtree_first_child(arg0);
  return tmpret96;
} // end-of-function


function
subtree1_right(arg0)
{
//
// knd = 0
  var tmpret97
  var tmplab, tmplab_js
//
  // __patsflab_right1
  tmpret97 = subtree1_lift(arg0, __patsfun_24__closurerize());
  return tmpret97;
} // end-of-function


function
__patsfun_24(arg0)
{
//
// knd = 0
  var tmpret98
  var tmplab, tmplab_js
//
  // __patsflab___patsfun_24
  tmpret98 = subtree_right(arg0);
  return tmpret98;
} // end-of-function


function
subtree1_last_child(arg0)
{
//
// knd = 0
  var tmpret99
  var tmplab, tmplab_js
//
  // __patsflab_last_child1
  tmpret99 = subtree1_lift(arg0, __patsfun_26__closurerize());
  return tmpret99;
} // end-of-function


function
__patsfun_26(arg0)
{
//
// knd = 0
  var tmpret100
  var tmplab, tmplab_js
//
  // __patsflab___patsfun_26
  tmpret100 = subtree_last_child(arg0);
  return tmpret100;
} // end-of-function


function
subtree1_up(arg0)
{
//
// knd = 0
  var tmpret101
  var tmplab, tmplab_js
//
  // __patsflab_up1
  tmpret101 = subtree1_lift(arg0, __patsfun_28__closurerize());
  return tmpret101;
} // end-of-function


function
__patsfun_28(arg0)
{
//
// knd = 0
  var tmpret102
  var tmplab, tmplab_js
//
  // __patsflab___patsfun_28
  tmpret102 = subtree_up(arg0);
  return tmpret102;
} // end-of-function


function
subtree1_down(arg0)
{
//
// knd = 0
  var tmpret103
  var tmplab, tmplab_js
//
  // __patsflab_down1
  tmpret103 = subtree1_lift(arg0, __patsfun_30__closurerize());
  return tmpret103;
} // end-of-function


function
__patsfun_30(arg0)
{
//
// knd = 0
  var tmpret104
  var tmplab, tmplab_js
//
  // __patsflab___patsfun_30
  tmpret104 = subtree_down(arg0);
  return tmpret104;
} // end-of-function


function
subtree1_back_to_top(arg0)
{
//
// knd = 0
  var tmpret105
  var tmplab, tmplab_js
//
  // __patsflab_back_to_top1
  tmpret105 = subtree1_lift(arg0, __patsfun_32__closurerize());
  return tmpret105;
} // end-of-function


function
__patsfun_32(arg0)
{
//
// knd = 0
  var tmpret106
  var tmplab, tmplab_js
//
  // __patsflab___patsfun_32
  tmpret106 = subtree_back_to_top(arg0);
  return tmpret106;
} // end-of-function


function
subtree1_insert(arg0, arg1)
{
//
// knd = 0
  var tmpret107
  var tmplab, tmplab_js
//
  // __patsflab_insert1
  tmpret107 = subtree1_lift(arg1, __patsfun_34__closurerize(arg0));
  return tmpret107;
} // end-of-function


function
__patsfun_34(env0, arg0)
{
//
// knd = 0
  var tmpret108
  var tmplab, tmplab_js
//
  // __patsflab___patsfun_34
  tmpret108 = subtree_insert(env0, arg0);
  return tmpret108;
} // end-of-function


function
update(arg0, arg1, arg2)
{
//
// knd = 0
  var tmp110
  var tmplab, tmplab_js
//
  // __patsflab_update
  tmp110 = dom_create_text(" OH HAI");
  dom_append_child(arg1, tmp110);
  return/*_void*/;
} // end-of-function


function
render_label(arg0)
{
//
// knd = 0
  var tmpret111
  var tmp112
  var tmp114
  var tmplab, tmplab_js
//
  // __patsflab_render_label
  // ATScaseofseq_beg
  tmplab_js = 1;
  while(true) {
    tmplab = tmplab_js; tmplab_js = 0;
    switch(tmplab) {
      // ATSbranchseq_beg
      case 1: // __atstmplab82
      if(!ATSCKpat_con0(arg0, 0)) { tmplab_js = 3; break; }
      case 2: // __atstmplab83
      tmpret111 = "[]";
      break;
      // ATSbranchseq_end
      // ATSbranchseq_beg
      case 3: // __atstmplab84
      if(!ATSCKpat_con0(arg0, 1)) { tmplab_js = 5; break; }
      case 4: // __atstmplab85
      tmpret111 = "if";
      break;
      // ATSbranchseq_end
      // ATSbranchseq_beg
      case 5: // __atstmplab86
      if(!ATSCKpat_con0(arg0, 2)) { tmplab_js = 7; break; }
      case 6: // __atstmplab87
      tmpret111 = "add";
      break;
      // ATSbranchseq_end
      // ATSbranchseq_beg
      case 7: // __atstmplab88
      if(!ATSCKpat_con0(arg0, 3)) { tmplab_js = 9; break; }
      case 8: // __atstmplab89
      tmpret111 = "mul";
      break;
      // ATSbranchseq_end
      // ATSbranchseq_beg
      case 9: // __atstmplab90
      if(!ATSCKpat_con1(arg0, 4)) { tmplab_js = 11; break; }
      case 10: // __atstmplab91
      tmp112 = arg0[1];
      tmp114 = ats2jspre_string_append("var(", tmp112);
      tmpret111 = ats2jspre_string_append(tmp114, ")");
      break;
      // ATSbranchseq_end
      // ATSbranchseq_beg
      case 11: // __atstmplab92
      if(!ATSCKpat_con1(arg0, 5)) { tmplab_js = 13; break; }
      case 12: // __atstmplab93
      tmpret111 = "const()";
      break;
      // ATSbranchseq_end
      // ATSbranchseq_beg
      case 13: // __atstmplab94
      if(!ATSCKpat_con0(arg0, 6)) { tmplab_js = 15; break; }
      case 14: // __atstmplab95
      tmpret111 = "lam";
      break;
      // ATSbranchseq_end
      // ATSbranchseq_beg
      case 15: // __atstmplab96
      if(!ATSCKpat_con0(arg0, 7)) { tmplab_js = 17; break; }
      case 16: // __atstmplab97
      tmpret111 = "annot";
      break;
      // ATSbranchseq_end
      // ATSbranchseq_beg
      case 17: // __atstmplab98
      case 18: // __atstmplab99
      tmpret111 = "app";
      break;
      // ATSbranchseq_end
    } // end-of-switch
    if (tmplab_js === 0) break;
  } // endwhile
  // ATScaseofseq_end
  return tmpret111;
} // end-of-function


function
create(arg0, arg1, arg2)
{
//
// knd = 0
  var tmpret115
  var tmp116
  var tmp117
  var tmp118
  var tmp120
  var tmp122
  var tmplab, tmplab_js
//
  // __patsflab_create
  tmp116 = render_label(arg1);
  tmp117 = dom_create_element("div");
  tmp118 = dom_create_text(tmp116);
  dom_append_child(tmp117, tmp118);
  if(arg2) {
    tmp120 = ats2jspre_string_append("content", " focussed");
  } else {
    tmp120 = "content";
  } // endif
  dom_set_attribute(tmp117, "class", tmp120);
  tmp122 = dom_create_element("div");
  dom_append_child(tmp122, tmp117);
  dom_set_attribute(tmp122, "id", arg0);
  dom_set_attribute(tmp122, "class", "spaced");
  dom_add_listener(tmp122, "click", __patsfun_38__closurerize(arg0, tmp116), false);
  tmpret115 = tmp122;
  return tmpret115;
} // end-of-function


function
__patsfun_38(env0, env1, arg0, arg1)
{
//
// knd = 0
  var tmp129
  var tmp130
  var tmp131
  var tmplab, tmplab_js
//
  // __patsflab___patsfun_38
  tmp131 = ats2jspre_string_append("clicked on: ", env0);
  tmp130 = ats2jspre_string_append(tmp131, "\ncontaining ");
  tmp129 = ats2jspre_string_append(tmp130, env1);
  ats2jspre_alert(tmp129);
  event_stop_propagation(arg1);
  return/*_void*/;
} // end-of-function


function
render(arg0, arg1)
{
//
// knd = 0
  var tmplab, tmplab_js
//
  // __patsflab_render
  subtree1_foreach(arg1, aux_40__closurerize(arg0));
  return/*_void*/;
} // end-of-function


function
aux_40(env0, arg0, arg1, arg2)
{
//
// knd = 0
  var tmp134
  var tmp135
  var tmp136
  var tmp137
  var tmp138
  var tmp139
  var tmplab, tmplab_js
//
  // __patsflab_aux_40
  tmp134 = tree_ident(arg0);
  tmp135 = eq_ident_ident(tmp134, arg1);
  tmp136 = tree_label(arg0);
  tmp137 = create(tmp134, tmp136, tmp135);
  // ATScaseofseq_beg
  tmplab_js = 1;
  while(true) {
    tmplab = tmplab_js; tmplab_js = 0;
    switch(tmplab) {
      // ATSbranchseq_beg
      case 1: // __atstmplab100
      if(ATSCKptrisnull(arg2)) { tmplab_js = 4; break; }
      case 2: // __atstmplab101
      tmp139 = arg2[0];
      // ATSINSfreecon(arg2);
      tmp138 = tmp139;
      break;
      // ATSbranchseq_end
      // ATSbranchseq_beg
      case 3: // __atstmplab102
      case 4: // __atstmplab103
      tmp138 = env0;
      break;
      // ATSbranchseq_end
    } // end-of-switch
    if (tmplab_js === 0) break;
  } // endwhile
  // ATScaseofseq_end
  dom_insert_at(tmp138, tmp137);
  return/*_void*/;
} // end-of-function


function
hello()
{
//
// knd = 0
  var tmp355
  var tmp356
  var tmplab, tmplab_js
//
  // __patsflab_hello
  tests_42();
  tmp355 = dom_get_by_id("btn-run-tests");
  tmp356 = dom_is_some(tmp355);
  if(!ATSCKpat_bool(tmp356, true)) ATSINScaseof_fail("/home/osboxes/proj/atstead/src/main.dats: 5760(line=256, offs=7) -- 5782(line=256, offs=29)");
  dom_add_listener(tmp355, "click", __patsfun_55__closurerize(), false);
  dom_putback(tmp355);
  return/*_void*/;
} // end-of-function


function
tests_42()
{
//
// knd = 0
  var tmp142
  var tmp143
  var tmp144
  var tmp145
  var tmp146
  var tmp147
  var tmp148
  var tmp149
  var tmp150
  var tmp151
  var tmp152
  var tmp153
  var tmp168
  var tmp169
  var tmp170
  var tmp171
  var tmp172
  var tmp173
  var tmp174
  var tmp175
  var tmp176
  var tmp177
  var tmp178
  var tmp179
  var tmp180
  var tmp181
  var tmp182
  var tmp183
  var tmp184
  var tmp189
  var tmp190
  var tmp191
  var tmp192
  var tmp193
  var tmp194
  var tmp195
  var tmp196
  var tmp197
  var tmp198
  var tmp199
  var tmp200
  var tmp201
  var tmp202
  var tmp203
  var tmp206
  var tmp208
  var tmp211
  var tmp213
  var tmp216
  var tmp219
  var tmp220
  var tmp221
  var tmp222
  var tmp223
  var tmp224
  var tmp225
  var tmp226
  var tmp227
  var tmp233
  var tmp234
  var tmp237
  var tmp239
  var tmp240
  var tmp243
  var tmp245
  var tmp246
  var tmp252
  var tmp253
  var tmp254
  var tmp255
  var tmp256
  var tmp263
  var tmp264
  var tmp265
  var tmp266
  var tmp267
  var tmp268
  var tmp269
  var tmp270
  var tmp271
  var tmp272
  var tmp278
  var tmp279
  var tmp280
  var tmp281
  var tmp282
  var tmp291
  var tmp292
  var tmp293
  var tmp294
  var tmp295
  var tmp296
  var tmp303
  var tmp304
  var tmp305
  var tmp306
  var tmp307
  var tmp308
  var tmp309
  var tmp310
  var tmp311
  var tmp312
  var tmp313
  var tmp314
  var tmp321
  var tmp322
  var tmp323
  var tmp324
  var tmp325
  var tmp326
  var tmp327
  var tmp334
  var tmp335
  var tmp336
  var tmp337
  var tmp338
  var tmp339
  var tmp340
  var tmp341
  var tmp342
  var tmp343
  var tmp344
  var tmp345
  var tmp346
  var tmp347
  var tmp348
  var tmp349
  var tmp350
  var tmplab, tmplab_js
//
  // __patsflab_tests_42
  tmp143 = [4, "c"];
  tmp142 = tree_atom(tmp143);
  tmp145 = [4, "z"];
  tmp144 = tree_atom(tmp145);
  tmp147 = [4, "b"];
  tmp146 = tree_atom(tmp147);
  tmp149 = [4, "a"];
  tmp153 = null;
  tmp152 = [tmp146, tmp153];
  tmp151 = [tmp144, tmp152];
  tmp150 = [tmp142, tmp151];
  tmp148 = tree_fork(tmp149, tmp150);
  ats2jspre_print_string("children foreach, starting at root");
  ats2jspre_print_newline();
  tree_children_foreach(tmp148, __patsfun_43__closurerize());
  ats2jspre_print_string("preorder foreach, starting at root");
  ats2jspre_print_newline();
  tree_preorder_foreach(tmp148, __patsfun_44);
  tree_delete(tmp148);
  ats2jspre_print_string("preorder test:");
  ats2jspre_print_newline();
  tmp169 = [4, "a"];
  tmp172 = [4, "b"];
  tmp175 = [4, "c"];
  tmp174 = tree_atom(tmp175);
  tmp176 = null;
  tmp173 = [tmp174, tmp176];
  tmp171 = tree_fork(tmp172, tmp173);
  tmp179 = [4, "d"];
  tmp182 = [4, "e"];
  tmp181 = tree_atom(tmp182);
  tmp183 = null;
  tmp180 = [tmp181, tmp183];
  tmp178 = tree_fork(tmp179, tmp180);
  tmp184 = null;
  tmp177 = [tmp178, tmp184];
  tmp170 = [tmp171, tmp177];
  tmp168 = tree_fork(tmp169, tmp170);
  tree_preorder_foreach(tmp168, __patsfun_45);
  tree_delete(tmp168);
  tmp190 = [4, "c"];
  tmp189 = tree_atom(tmp190);
  tmp192 = [4, "z"];
  tmp191 = tree_atom(tmp192);
  tmp194 = [4, "b"];
  tmp193 = tree_atom(tmp194);
  tmp196 = [4, "a"];
  tmp200 = null;
  tmp199 = [tmp193, tmp200];
  tmp198 = [tmp191, tmp199];
  tmp197 = [tmp189, tmp198];
  tmp195 = tree_fork(tmp196, tmp197);
  tmp201 = subtree_root(tmp195);
  tmp202 = subtree_down(tmp201);
  tmp203 = subtree_right(tmp202);
  ats2jspre_print_string("root, down, right: ");
  tmp206 = tree_label(tmp203);
  print_label(tmp206);
  ats2jspre_print_newline();
  tmp208 = subtree_left(tmp203);
  ats2jspre_print_string("now left: ");
  tmp211 = tree_label(tmp208);
  print_label(tmp211);
  ats2jspre_print_newline();
  tmp213 = subtree_back_to_top(tmp208);
  ats2jspre_print_string("host: ");
  tmp216 = tree_label(tmp213);
  print_label(tmp216);
  ats2jspre_print_newline();
  tree_delete(tmp213);
  tmp220 = [4, "c"];
  tmp219 = tree_atom(tmp220);
  tmp222 = [4, "z"];
  tmp221 = tree_atom(tmp222);
  tmp224 = [4, "a"];
  tmp227 = null;
  tmp226 = [tmp221, tmp227];
  tmp225 = [tmp219, tmp226];
  tmp223 = tree_fork(tmp224, tmp225);
  ats2jspre_print_string("before replacing:");
  ats2jspre_print_newline();
  tree_preorder_foreach(tmp223, __patsfun_46);
  tmp233 = subtree_root(tmp223);
  tmp234 = subtree_down(tmp233);
  ats2jspre_print_string("looking at ");
  tmp237 = tree_label(tmp234);
  print_label(tmp237);
  ats2jspre_print_newline();
  tmp240 = [4, "c1"];
  tmp239 = tree_atom(tmp240);
  ats2jspre_print_string("new tree: ");
  tmp243 = tree_label(tmp239);
  print_label(tmp243);
  ats2jspre_print_newline();
  tmp245 = subtree_replace(tmp239, tmp234);
  tmp246 = subtree_back_to_top(tmp245);
  ats2jspre_print_string("after replacing [c] with [c1]:");
  ats2jspre_print_newline();
  tree_preorder_foreach(tmp246, __patsfun_47);
  tmp252 = subtree_root(tmp246);
  tmp254 = [4, "A"];
  tmp253 = tree_atom(tmp254);
  tmp255 = subtree_replace(tmp253, tmp252);
  tmp256 = subtree_back_to_top(tmp255);
  ats2jspre_print_string("after replacing root with [A]:");
  ats2jspre_print_newline();
  tree_preorder_foreach(tmp256, __patsfun_48);
  tree_delete(tmp256);
  tmp264 = [4, "c"];
  tmp263 = tree_atom(tmp264);
  tmp266 = [4, "z"];
  tmp268 = null;
  tmp267 = [tmp263, tmp268];
  tmp265 = tree_fork(tmp266, tmp267);
  tmp270 = [4, "a"];
  tmp272 = null;
  tmp271 = [tmp265, tmp272];
  tmp269 = tree_fork(tmp270, tmp271);
  ats2jspre_print_string("before promoting [c] to [z]:");
  ats2jspre_print_newline();
  tree_preorder_foreach(tmp269, __patsfun_49);
  tmp278 = subtree_root(tmp269);
  tmp279 = subtree_down(tmp278);
  tmp280 = subtree_down(tmp279);
  tmp281 = subtree_promote(tmp280);
  tmp282 = subtree_back_to_top(tmp281);
  ats2jspre_print_string("after promoting [c] to [z]:");
  ats2jspre_print_newline();
  tree_preorder_foreach(tmp282, __patsfun_50);
  tree_delete(tmp282);
  ats2jspre_print_string("insert at hole");
  ats2jspre_print_newline();
  tmp291 = tree_hole();
  tmp292 = subtree_root(tmp291);
  tmp294 = [4, "A"];
  tmp293 = tree_atom(tmp294);
  tmp295 = subtree_treeinsert(tmp293, tmp292);
  tmp296 = subtree_back_to_top(tmp295);
  tree_preorder_foreach(tmp296, __patsfun_51);
  tree_delete(tmp296);
  ats2jspre_print_string("insert at non-hole");
  ats2jspre_print_newline();
  tmp304 = [4, "plus"];
  tmp306 = tree_hole();
  tmp308 = tree_hole();
  tmp309 = null;
  tmp307 = [tmp308, tmp309];
  tmp305 = [tmp306, tmp307];
  tmp303 = tree_fork(tmp304, tmp305);
  tmp310 = subtree_root(tmp303);
  tmp312 = [4, "A"];
  tmp311 = tree_atom(tmp312);
  tmp313 = subtree_treeinsert(tmp311, tmp310);
  tmp314 = subtree_back_to_top(tmp313);
  tree_preorder_foreach(tmp314, __patsfun_52);
  tree_delete(tmp314);
  ats2jspre_print_string("simple entry test 1");
  ats2jspre_print_newline();
  tmp321 = tree_hole();
  tmp322 = subtree_root(tmp321);
  tmp324 = [4, "a"];
  tmp323 = entry(tmp324, tmp322);
  tmp326 = 2;
  tmp325 = entry(tmp326, tmp323);
  tmp327 = subtree_back_to_top(tmp325);
  tree_preorder_foreach(tmp327, __patsfun_53);
  tree_delete(tmp327);
  ats2jspre_print_string("simple entry test 2");
  ats2jspre_print_newline();
  tmp334 = tree_hole();
  tmp335 = subtree_root(tmp334);
  tmp337 = [4, "a"];
  tmp336 = entry(tmp337, tmp335);
  tmp339 = 3;
  tmp338 = entry(tmp339, tmp336);
  tmp341 = [4, "b"];
  tmp340 = entry(tmp341, tmp338);
  tmp343 = 2;
  tmp342 = entry(tmp343, tmp340);
  tmp345 = [4, "c"];
  tmp344 = entry(tmp345, tmp342);
  tmp347 = 3;
  tmp346 = entry(tmp347, tmp344);
  tmp349 = [4, "d"];
  tmp348 = entry(tmp349, tmp346);
  tmp350 = subtree_back_to_top(tmp348);
  tree_preorder_foreach(tmp350, __patsfun_54);
  tree_delete(tmp350);
  return/*_void*/;
} // end-of-function


function
__patsfun_43(arg0)
{
//
// knd = 0
  var tmp159
  var tmplab, tmplab_js
//
  // __patsflab___patsfun_43
  tmp159 = tree_label(arg0);
  print_label(tmp159);
  ats2jspre_print_newline();
  return/*_void*/;
} // end-of-function


function
__patsfun_44(arg0)
{
//
// knd = 0
  var tmplab, tmplab_js
//
  // __patsflab___patsfun_44
  print_label(arg0);
  ats2jspre_print_newline();
  return/*_void*/;
} // end-of-function


function
__patsfun_45(arg0)
{
//
// knd = 0
  var tmplab, tmplab_js
//
  // __patsflab___patsfun_45
  print_label(arg0);
  ats2jspre_print_newline();
  return/*_void*/;
} // end-of-function


function
__patsfun_46(arg0)
{
//
// knd = 0
  var tmplab, tmplab_js
//
  // __patsflab___patsfun_46
  print_label(arg0);
  ats2jspre_print_newline();
  return/*_void*/;
} // end-of-function


function
__patsfun_47(arg0)
{
//
// knd = 0
  var tmplab, tmplab_js
//
  // __patsflab___patsfun_47
  print_label(arg0);
  ats2jspre_print_newline();
  return/*_void*/;
} // end-of-function


function
__patsfun_48(arg0)
{
//
// knd = 0
  var tmplab, tmplab_js
//
  // __patsflab___patsfun_48
  print_label(arg0);
  ats2jspre_print_newline();
  return/*_void*/;
} // end-of-function


function
__patsfun_49(arg0)
{
//
// knd = 0
  var tmplab, tmplab_js
//
  // __patsflab___patsfun_49
  print_label(arg0);
  ats2jspre_print_newline();
  return/*_void*/;
} // end-of-function


function
__patsfun_50(arg0)
{
//
// knd = 0
  var tmplab, tmplab_js
//
  // __patsflab___patsfun_50
  print_label(arg0);
  ats2jspre_print_newline();
  return/*_void*/;
} // end-of-function


function
__patsfun_51(arg0)
{
//
// knd = 0
  var tmplab, tmplab_js
//
  // __patsflab___patsfun_51
  print_label(arg0);
  ats2jspre_print_newline();
  return/*_void*/;
} // end-of-function


function
__patsfun_52(arg0)
{
//
// knd = 0
  var tmplab, tmplab_js
//
  // __patsflab___patsfun_52
  print_label(arg0);
  ats2jspre_print_newline();
  return/*_void*/;
} // end-of-function


function
__patsfun_53(arg0)
{
//
// knd = 0
  var tmplab, tmplab_js
//
  // __patsflab___patsfun_53
  print_label(arg0);
  ats2jspre_print_newline();
  return/*_void*/;
} // end-of-function


function
__patsfun_54(arg0)
{
//
// knd = 0
  var tmplab, tmplab_js
//
  // __patsflab___patsfun_54
  print_label(arg0);
  ats2jspre_print_newline();
  return/*_void*/;
} // end-of-function


function
__patsfun_55(arg0, arg1)
{
//
// knd = 0
  var tmplab, tmplab_js
//
  // __patsflab___patsfun_55
  tests_42();
  return/*_void*/;
} // end-of-function


function
hello_sdom()
{
//
// knd = 0
  var tmp360
  var tmp361
  var tmp374
  var tmp376
  var tmp378
  var tmp379
  var tmp382
  var tmp384
  var tmp385
  var tmp388
  var tmp394
  var tmp395
  var tmplab, tmplab_js
//
  // __patsflab_hello_sdom
  tmp360 = dom_create_element("div");
  tmp361 = dom_create_element("span");
  dom_set_attribute(tmp361, "style", "border:1px solid");
  dom_set_attribute(tmp361, "id", "MY-caret");
  dom_append_child(tmp360, tmp361);
  dom_add_listener(tmp360, "click", __patsfun_57__closurerize("hey"), false);
  dom_set_attribute(tmp360, "class", "foobar");
  tmp374 = dom_create_text("Hello!");
  dom_append_child(tmp360, tmp374);
  tmp376 = dom_create_text(" ");
  dom_append_child(tmp360, tmp376);
  tmp378 = dom_create_element("span");
  tmp379 = dom_create_text("there");
  dom_append_child(tmp378, tmp379);
  dom_append_child(tmp360, tmp378);
  tmp382 = dom_create_text("!");
  dom_append_child(tmp360, tmp382);
  tmp384 = dom_create_element("p");
  tmp385 = dom_create_text("Please check the box");
  dom_append_child(tmp384, tmp385);
  dom_append_child(tmp360, tmp384);
  tmp388 = dom_create_element("input");
  dom_set_attribute(tmp388, "type", "checkbox");
  dom_set_attribute(tmp388, "id", "my-checkbox");
  dom_add_listener(tmp388, "click", __patsfun_58__closurerize(), false);
  dom_append_child(tmp360, tmp388);
  tmp394 = dom_get_by_id("sdom-test");
  tmp395 = dom_is_some(tmp394);
  if(!ATSCKpat_bool(tmp395, true)) ATSINScaseof_fail("/home/osboxes/proj/atstead/src/main.dats: 8198(line=326, offs=7) -- 8220(line=326, offs=29)");
  dom_append_child(tmp394, tmp360);
  dom_putback(tmp394);
  return/*_void*/;
} // end-of-function


function
__patsfun_57(env0, arg0, arg1)
{
//
// knd = 0
  var tmp367
  var tmp369
  var tmp370
  var tmp371
  var tmp372
  var tmplab, tmplab_js
//
  // __patsflab___patsfun_57
  tmp367 = dom_is_some(arg0);
  if(!ATSCKpat_bool(tmp367, true)) ATSINScaseof_fail("/home/osboxes/proj/atstead/src/main.dats: 7378(line=307, offs=9) -- 7399(line=307, offs=30)");
  tmp369 = ats2jspre_string_append("caret clicked! and we also have: ", env0);
  ats2jspre_alert(tmp369);
  tmp370 = dom_get_attribute(arg0, "style");
  tmp372 = ats2jspre_eq_string_string(tmp370, "font-weight:bold");
  if(tmp372) {
    tmp371 = "";
  } else {
    tmp371 = "font-weight:bold";
  } // endif
  dom_set_attribute(arg0, "style", tmp371);
  return/*_void*/;
} // end-of-function


function
__patsfun_58(arg0, arg1)
{
//
// knd = 0
  var tmplab, tmplab_js
//
  // __patsflab___patsfun_58
  event_prevent_default(arg1);
  return/*_void*/;
} // end-of-function


function
_057_home_057_osboxes_057_proj_057_atstead_057_src_057_main_056_dats__present(arg0, arg1)
{
//
// knd = 0
  var tmpret397
  var tmp398
  var tmp399
  var tmp400
  var tmp401
  var tmp402
  var tmp403
  var tmp404
  var tmp406
  var tmplab, tmplab_js
//
  // __patsflab_present
  // ATScaseofseq_beg
  tmplab_js = 1;
  while(true) {
    tmplab = tmplab_js; tmplab_js = 0;
    switch(tmplab) {
      // ATSbranchseq_beg
      case 1: // __atstmplab104
      if(!ATSCKpat_con1(arg1, 0)) { tmplab_js = 3; break; }
      case 2: // __atstmplab105
      tmp398 = arg1[1];
      // ATSINSfreecon(arg1);
      tmp403 = subtree1_flatten(arg0);
      tmp404 = subtree_back_to_top(tmp403);
      tree_delete(tmp404);
      tmp406 = subtree_root(tmp398);
      tmpret397 = subtree1_unflatten(tmp406);
      break;
      // ATSbranchseq_end
      // ATSbranchseq_beg
      case 3: // __atstmplab106
      if(!ATSCKpat_con1(arg1, 1)) { tmplab_js = 5; break; }
      case 4: // __atstmplab107
      tmp399 = arg1[1];
      // ATSINSfreecon(arg1);
      // ATScaseofseq_beg
      tmplab_js = 1;
      while(true) {
        tmplab = tmplab_js; tmplab_js = 0;
        switch(tmplab) {
          // ATSbranchseq_beg
          case 1: // __atstmplab120
          if(!ATSCKpat_con0(tmp399, 0)) { tmplab_js = 3; break; }
          case 2: // __atstmplab121
          tmpret397 = subtree1_left(arg0);
          break;
          // ATSbranchseq_end
          // ATSbranchseq_beg
          case 3: // __atstmplab122
          if(!ATSCKpat_con0(tmp399, 1)) { tmplab_js = 5; break; }
          case 4: // __atstmplab123
          tmpret397 = subtree1_right(arg0);
          break;
          // ATSbranchseq_end
          // ATSbranchseq_beg
          case 5: // __atstmplab124
          if(!ATSCKpat_con0(tmp399, 2)) { tmplab_js = 7; break; }
          case 6: // __atstmplab125
          tmpret397 = subtree1_up(arg0);
          break;
          // ATSbranchseq_end
          // ATSbranchseq_beg
          case 7: // __atstmplab126
          if(!ATSCKpat_con0(tmp399, 3)) { tmplab_js = 9; break; }
          case 8: // __atstmplab127
          tmpret397 = subtree1_down(arg0);
          break;
          // ATSbranchseq_end
          // ATSbranchseq_beg
          case 9: // __atstmplab128
          if(!ATSCKpat_con0(tmp399, 4)) { tmplab_js = 11; break; }
          case 10: // __atstmplab129
          tmpret397 = subtree1_first_child(arg0);
          break;
          // ATSbranchseq_end
          // ATSbranchseq_beg
          case 11: // __atstmplab130
          if(!ATSCKpat_con0(tmp399, 5)) { tmplab_js = 13; break; }
          case 12: // __atstmplab131
          tmpret397 = subtree1_last_child(arg0);
          break;
          // ATSbranchseq_end
          // ATSbranchseq_beg
          case 13: // __atstmplab132
          case 14: // __atstmplab133
          tmpret397 = subtree1_back_to_top(arg0);
          break;
          // ATSbranchseq_end
        } // end-of-switch
        if (tmplab_js === 0) break;
      } // endwhile
      // ATScaseofseq_end
      break;
      // ATSbranchseq_end
      // ATSbranchseq_beg
      case 5: // __atstmplab108
      if(!ATSCKpat_con1(arg1, 2)) { tmplab_js = 7; break; }
      case 6: // __atstmplab109
      tmp400 = arg1[1];
      // ATSINSfreecon(arg1);
      tmpret397 = subtree1_replace(tmp400, arg0);
      break;
      // ATSbranchseq_end
      // ATSbranchseq_beg
      case 7: // __atstmplab110
      if(!ATSCKpat_con1(arg1, 3)) { tmplab_js = 9; break; }
      case 8: // __atstmplab111
      tmp401 = arg1[1];
      // ATSINSfreecon(arg1);
      tmpret397 = subtree1_insert(tmp401, arg0);
      break;
      // ATSbranchseq_end
      // ATSbranchseq_beg
      case 9: // __atstmplab112
      if(!ATSCKpat_con1(arg1, 4)) { tmplab_js = 11; break; }
      case 10: // __atstmplab113
      tmp402 = arg1[1];
      // ATSINSfreecon(arg1);
      tmpret397 = subtree1_entry(tmp402, arg0);
      break;
      // ATSbranchseq_end
      // ATSbranchseq_beg
      case 11: // __atstmplab114
      if(!ATSCKpat_con0(arg1, 5)) { tmplab_js = 13; break; }
      case 12: // __atstmplab115
      tmpret397 = subtree1_open(arg0);
      break;
      // ATSbranchseq_end
      // ATSbranchseq_beg
      case 13: // __atstmplab116
      if(!ATSCKpat_con0(arg1, 6)) { tmplab_js = 15; break; }
      case 14: // __atstmplab117
      tmpret397 = subtree1_close(arg0);
      break;
      // ATSbranchseq_end
      // ATSbranchseq_beg
      case 15: // __atstmplab118
      case 16: // __atstmplab119
      tmpret397 = arg0;
      break;
      // ATSbranchseq_end
    } // end-of-switch
    if (tmplab_js === 0) break;
  } // endwhile
  // ATScaseofseq_end
  return tmpret397;
} // end-of-function


function
hello_sdom_tree()
{
//
// knd = 0
  var tmp408
  var tmp444
  var tmp445
  var tmplab, tmplab_js
//
  // __patsflab_hello_sdom_tree
  tmp408 = tree_hole();
  tmp444 = subtree_root(tmp408);
  tmp445 = subtree1_unflatten(tmp444);
  input_events(tmp445, action_61);
  return/*_void*/;
} // end-of-function


function
action_61(arg0, arg1)
{
//
// knd = 0
  var tmpret409
  var tmp410
  var tmp411
  var tmp412
  var tmp413
  var tmp414
  var tmp415
  var tmp416
  var tmp417
  var tmp418
  var tmp419
  var tmp420
  var tmp421
  var tmp422
  var tmp423
  var tmp424
  var tmp425
  var tmp426
  var tmp427
  var tmp428
  var tmp429
  var tmp430
  var tmp431
  var tmp432
  var tmp433
  var tmp434
  var tmp435
  var tmp436
  var tmp437
  var tmp438
  var tmp439
  var tmp440
  var tmp441
  var tmplab, tmplab_js
//
  // __patsflab_action_61
  tmp411 = ats2jspre_eq_string_string(arg1, "ArrowLeft");
  if(tmp411) {
    tmp412 = 0;
    tmp410 = [1, tmp412];
  } else {
    tmp413 = ats2jspre_eq_string_string(arg1, "ArrowRight");
    if(tmp413) {
      tmp414 = 1;
      tmp410 = [1, tmp414];
    } else {
      tmp415 = ats2jspre_eq_string_string(arg1, "ArrowUp");
      if(tmp415) {
        tmp416 = 2;
        tmp410 = [1, tmp416];
      } else {
        tmp417 = ats2jspre_eq_string_string(arg1, "ArrowDown");
        if(tmp417) {
          tmp418 = 3;
          tmp410 = [1, tmp418];
        } else {
          tmp419 = ats2jspre_eq_string_string(arg1, "KeyP");
          if(tmp419) {
            tmp420 = 2;
            tmp410 = [4, tmp420];
          } else {
            tmp421 = ats2jspre_eq_string_string(arg1, "KeyM");
            if(tmp421) {
              tmp422 = 3;
              tmp410 = [4, tmp422];
            } else {
              tmp423 = ats2jspre_eq_string_string(arg1, "KeyI");
              if(tmp423) {
                tmp424 = 1;
                tmp410 = [4, tmp424];
              } else {
                tmp425 = ats2jspre_eq_string_string(arg1, "KeyV");
                if(tmp425) {
                  tmp426 = [4, "MYVAR"];
                  tmp410 = [4, tmp426];
                } else {
                  tmp427 = ats2jspre_eq_string_string(arg1, "KeyH");
                  if(tmp427) {
                    tmp428 = tree_hole();
                    tmp410 = [2, tmp428];
                  } else {
                    tmp429 = ats2jspre_eq_string_string(arg1, "Digit1");
                    if(tmp429) {
                      tmp430 = [5, 1];
                      tmp410 = [4, tmp430];
                    } else {
                      tmp431 = ats2jspre_eq_string_string(arg1, "Digit2");
                      if(tmp431) {
                        tmp432 = [5, 2];
                        tmp410 = [4, tmp432];
                      } else {
                        tmp433 = ats2jspre_eq_string_string(arg1, "Digit3");
                        if(tmp433) {
                          tmp434 = [5, 3];
                          tmp410 = [4, tmp434];
                        } else {
                          tmp435 = ats2jspre_eq_string_string(arg1, "Digit9");
                          if(tmp435) {
                            tmp410 = 5;
                          } else {
                            tmp436 = ats2jspre_eq_string_string(arg1, "Digit0");
                            if(tmp436) {
                              tmp410 = 6;
                            } else {
                              tmp437 = ats2jspre_eq_string_string(arg1, "KeyL");
                              if(tmp437) {
                                tmp438 = 6;
                                tmp410 = [4, tmp438];
                              } else {
                                tmp439 = ats2jspre_eq_string_string(arg1, "Space");
                                if(tmp439) {
                                  tmp440 = 8;
                                  tmp410 = [4, tmp440];
                                } else {
                                  tmp410 = 7;
                                } // endif
                              } // endif
                            } // endif
                          } // endif
                        } // endif
                      } // endif
                    } // endif
                  } // endif
                } // endif
              } // endif
            } // endif
          } // endif
        } // endif
      } // endif
    } // endif
  } // endif
  tmp441 = _057_home_057_osboxes_057_proj_057_atstead_057_src_057_main_056_dats__present(arg0, tmp410);
  dom_clear_at("container");
  render("container", tmp441);
  tmpret409 = tmp441;
  return tmpret409;
} // end-of-function

// dynloadflag_minit
var _057_home_057_osboxes_057_proj_057_atstead_057_src_057_main_056_dats__dynloadflag = 0;

function
_057_home_057_osboxes_057_proj_057_atstead_057_src_057_main_056_dats__dynload()
{
//
// knd = 0
  var tmplab, tmplab_js
//
  // ATSdynload()
  // ATSdynloadflag_sta(_057_home_057_osboxes_057_proj_057_atstead_057_src_057_main_056_dats__dynloadflag(809))
  if(ATSCKiseqz(_057_home_057_osboxes_057_proj_057_atstead_057_src_057_main_056_dats__dynloadflag)) {
    _057_home_057_osboxes_057_proj_057_atstead_057_src_057_main_056_dats__dynloadflag = 1 ; // flag is set
    subtree_rightup = __patsfun_7;
    subtree_next = __patsfun_8;
    subtree_insert = __patsfun_9;
    kill = __patsfun_10;
    enter = __patsfun_11;
    entry = __patsfun_12;
    reduce = __patsfun_13;
    producable = __patsfun_14;
    hello();
    hello_sdom();
    hello_sdom_tree();
  } // endif
  return/*_void*/;
} // end-of-function


function
my_dynload()
{
//
// knd = 0
  var tmplab, tmplab_js
//
  _057_home_057_osboxes_057_proj_057_atstead_057_src_057_main_056_dats__dynload();
  return/*_void*/;
} // end-of-function


/* ATSextcode_beg() */

//
function
dom_is_some(d) { return d !== null; }
function
dom_is_none(d) { return d === null; }
//
function
dom_create_element (x) {
  return document.createElement(x);
}
function
dom_add_listener (x, evt, f, usecapture) {
  x.addEventListener(evt, function(e) {
    return f[0](f, this, e);
  }, usecapture);
}
/*
function
dom_remove_listener (x, evt, f, usecapture) {
  x.removeEventListener(evt, f, usecapture);
}
*/
function
event_prevent_default (e) {
  e.preventDefault();
}
function
event_stop_propagation (e) {
  e.stopPropagation();
}
function
dom_set_attribute (x, k, v) {
  x.setAttribute(k, v);
}
function
dom_get_attribute (x, k) {
  return x.getAttribute(k);
}
function
dom_create_text (v) {
  return document.createTextNode(v);
}

var __the_id__ = 0;
function
get_next_id() {
  __the_id__--;
  return "sdom" + __the_id__;
}
function
dom_get_id (x) {
  return x.id === ""? [] : [x.id];
}

function
dom_get_by_id (id) {
  return document.getElementById(id);
}
function
dom_putback(d) {
  // nop
}
function
dom_remove(d) {
  d.parentNode.removeChild(d);
}
function
dom_replace(x, y) {
  d.parentNode.replaceChild(y, x);
}
function
dom_free (d) {
// nop...
}
function
dom_append_child (p, c) {
  p.appendChild(c);
}
function
dom_insert_at (id, p) {
  var elt = document.getElementById(id);
  elt.appendChild(p);
}
function
dom_clear_at (id) {
  var elt = document.getElementById(id);
  while (elt.firstChild) {
    elt.removeChild(elt.firstChild);
  }
}

/* ATSextcode_end() */

/* ATSextcode_beg() */
//
function
eq_ident_ident (x, y) { return x === y; }
//
var the_tree_ident = 0;
function
the_tree_ident_getnext () {
  the_tree_ident--;
  return "tid-" + the_tree_ident;
}
var the_tree_allocs = {};
//
function
tree_atom(x) {
  var i = the_tree_ident_getnext();
  var res = { prev: null, next: null, value: x, parent: null, child : null, ident: i };
  the_tree_allocs[i] = res;
  return res;
}
function
tree_insert_before(x, y) {
  y.parent = x;
  var c = x.child;
  if (c === null) {
    x.child = y;
  } else {
    y.prev = c.prev;
    if (y.prev !== null)
      y.prev.next = y;
    c.prev = y;
    y.next = c;
    x.child = y;
  }
  return x;
}
function
tree_insert_after(x,y) {
  y.parent = x;
  var c = x.child;
  if (c === null) {
    x.child = y;
  } else {
    y.next = c.next;
    if (y.next !== null)
      y.next.prev = y;
    c.next = y;
    y.prev = c;

    //x.child = y; // preserve the current child of x
  }
  return x;
}
function
tree_fork(v, xs) {
  var t = tree_atom(v);
  var lst = ats2jspre_list_vt_reverse(xs);
  while (lst !== null) {
    var x = lst[0];
    lst = lst[1];
    tree_insert_before(t, x);
  }
  return t;
}
function
tree_delete(x) {
  // NOTE: we only allow deleting the whole tree
  // so that means we don't have to do anything here
  delete the_tree_allocs[x.ident];
}

function
tree_preorder_foreach(x, f) {
  if (x === null)
    return;

  var r = x;
  
  var node = r
  while (true) {
    f(node.value);
    if (node.child !== null) {
       node = node.child // walk down
    } else {
       while (node.next === null) {
         if (node === r)
           return;
         node = node.parent; // walk up
       }
       node = node.next; // ... and right
    }
  }
}

function
tree_label(x) {
  return x.value;
}
function
tree_ident(x) {
  return x.ident;
}
function
tree_atomic(x) {
  return x.child === null;
}
function
tree_is_fork(x) {
  return x.child !== null;
}

function
tree_children_foreach(x, f) {
  var c = x.child;
  while (c !== null) {
    f[0](f, c); // clofun
    c = c.next;
  }
}

//---- subtree
function
subtree_root(x) {
  return x;
}
function
subtree_foreach_parent(x, epid, f) {
  var xid = tree_ident(x);
  var r = subtree_back_to_top(x);
  
  var node = r
  while (true) {
    var pid;
    if (node.parent === null) {
      if (epid === null) {
        pid = null;
      } else {
        pid = epid;
      }
    } else {
      var parent_id = tree_ident(node.parent);
      pid = [parent_id];
    }

    f[0](f, node, xid, pid);
    if (node.child !== null) {
       node = node.child // walk down
    } else {
       while (node.next === null) {
         if (node === r)
           return;
         node = node.parent; // walk up
       }
       node = node.next; // ... and right
    }
  }
}
function
subtree_foreach(x, f) {
  subtree_foreach_parent(x, null, f);
}

// - top/topmost(parent=null)
function
subtree_topmost(x) {
  return x.parent === null;
}
function
subtree_up(x) {
  if (subtree_topmost(x)) return x;
  else return x.parent;
}
// - left/leftmost(prev=null)
function
subtree_leftmost(x) {
  return x.prev === null;
}
function
subtree_left(x) {
  if (subtree_leftmost(x)) return x;
  else return x.prev;
}
// - right/rightmost(next=null)
function
subtree_rightmost(x) {
  return x.next === null;
}
function
subtree_right(x) {
  if (subtree_rightmost(x)) return x;
  else return x.next;
}
// - bottom/bottommost(child=null)
function
subtree_bottommost(x) {
  return x.child === null;
}
function
subtree_down(x) {
  if (subtree_bottommost(x)) return x;
  else return x.child;
}

function
subtree_first_child(x) {
  while (!subtree_leftmost(x)) {
    x = subtree_left(x);
  }
  return x;
}
function
subtree_last_child(x) {
  while (!subtree_rightmost(x)) {
    x = subtree_right(x);
  }
  return x;
}
function
subtree_back_to_top(x) {
  while (!subtree_topmost(x)) {
    x = subtree_up(x);
  }
  return x;
}
function
subtree_next_such_that(p, st) {
  var st0 = subtree_next(st);
  var st1 = st0;
  while (true) {
    if (subtree_topmost(st1) || p(st1)) break;
    else st1 = subtree_next(st1);
  }
  if (p(st1)) return st1;
  return st;
}

//----------------------
// subtree modification

function
subtree_replace(tree, st) {
  tree.parent = st.parent;
  tree.next = st.next;
  tree.prev = st.prev;

  if (st.next !== null) {
    st.next.prev = tree;
  }
  if (st.prev !== null) {
    st.prev.next = tree;
  }
  var p = st.parent;
  if (p !== null) {
    if (p.child === st) {
      p.child = tree;
    }
  }
 
  st.next = null;
  st.prev = null;
  st.parent = null;
  tree_delete(st);

  return tree;
}
function
subtree_swap(tree, st) {
  tree.parent = st.parent;
  tree.next = st.next;
  tree.prev = st.prev;

  if (st.next !== null) {
    st.next.prev = tree;
  }
  if (st.prev !== null) {
    st.prev.next = tree;
  }
  var p = st.parent;
  if (p !== null) {
    if (p.child === st) {
      p.child = tree;
    }
  }
  st.next = null;
  st.prev = null;
  st.parent = null;
  return tree;
}
function
subtree_unlink(st) {
  var p = st.parent;
  //if (p !== null) // assume non-null
  {
    if (p.child === st) {
      p.child = st.next;
    }
    st.parent = null;
  }
  if (st.next !== null) {
    st.next.prev = st.prev;
    st.next = null;
  }
  if (st.prev !== null) {
    st.prev.next = st.next;
    st.prev = null;
  }
  return st;
}
function
subtree_at_hole(st) {
  var lab = tree_label(st);
  return label_is_hole(lab) && tree_atomic(st);
}
function
subtree_treeinsert(t, st) {
  if (subtree_at_hole(st)) {
    return subtree_replace(t, st);
  } else {
    // the current focus is replaced with [t]
    var sel = st;
    var p = st.parent;
    if (p !== null) {
      if (p.child == st) {
        p.child = t;
      }
    }
    t.parent = p;
    st.parent = null;

    if (st.prev !== null) {
      st.prev.next = t;
    }
    t.prev = st.prev;
    st.prev = null;

    if (st.next !== null) {
      st.next.prev = t;
    }
    t.next = st.next;
    st.next = null;

    // navigate down the new subtree
    st = subtree_down(t);
    // and put the extracted tree back
    st = subtree_replace(sel, st);

    return st;
  }
}
function
subtree_promote(st) {
  var p = st.parent;

  if (p === null)
    return st;

  var sel = subtree_unlink(st);
  return subtree_replace(sel, p);
}

//----------------------
function
irreducible(l, st) {
    var res = subtree_at_hole(st)
    || subtree_topmost(st)
    || !subtree_rightmost(st)
    || !producable (l, tree_label (subtree_up(st)));
    return res;
}
//----------------------
// subtree1

/*
what's the new approach?
- state: stack of trees (stack of holes, even)
  - conceptually, extends from the left rightwards
  - every element E has some element on its "left", say P (except the root)
    - precondition: P is a hole!
    - then P is the parent of parenthesized subtree E
- last element of stack: just the current focussed subtree :)
  - other elements (the path): these are all HOLES!
- open paren:
  - if current head is a hole, do nothing
    but if it's not, then make a fresh hole H and swap it with current head
  - push to the end of stack (? like, just put it after current head, makes it into a queue???)
- close paren:
  - if there is only one element on stack, ignore
  - otherwise, pop the node N off the stack, and replace the hole (previous element of stack)
    with N (destroying the hole in the process)
- rendering
  - get the first element of stack, the root
  - render the nodes recursively
    - check the stack, if you have a node to look for... then wait for it
      - if current node id's same as the node we are looking for, begin rendering the subtree!
    - otherwise, you have no nodes to look for, just render stuff
*/
function
subtree1_unflatten(s) {
  var h = tree_hole ();
  return {stk: [h], sel: s};
}
function
subtree1_flatten(st) {
  var focus = st.sel;
  var stk = st.stk;
  while (stk.length > 0) {
    var p = stk.pop();
    focus = subtree_back_to_top(focus);
    focus = subtree_replace(p, focus);
  }
  return focus;
}
function
subtree1_lift(st,f) {
  var sel = st.sel;
  sel = f[0](f, sel);
  st.sel = sel;
  return st;
}
function
subtree1_replace(t, st) {
  var clo = [function(cenv,st) {
    return subtree_replace(cenv[1], st);
  }, t];
  return subtree1_lift(st, clo);
}
function
subtree1_open(st) {
  var sel = st.sel;

  var h = tree_hole ();
  st.stk.push(sel);
  st.sel = h;

  return st;
}
function
subtree1_close(st) {
  // pop the most-recent subtree and incorporate it back into its parent
  var stk = st.stk;
  var sel = st.sel;  
  if (stk.length > 1) {
    var n = stk.pop();
    sel = subtree_back_to_top(sel);
    n = subtree_replace(sel, n);
    st.sel = n;
    return subtree1_right (st);
  } else {
    return st;
  }
}
function
subtree1_foreach(st, f) {
  var stk = st.stk;
  var i = 0;
  while (i < stk.length) {
    var n = stk[i];
    var np = i>0? stk[i-1] : null;
    var n_id = np? [tree_ident(np)] : null;
    subtree_foreach_parent(n, n_id, f);
    i++;
  }
  var last = stk[stk.length-1];
  var n_id = tree_ident(last);
  n_id = [n_id];
  subtree_foreach_parent(st.sel, n_id, f);
}

/* ATSextcode_end() */

/* ATSextcode_beg() */

function
input_events (state, handler) {
  document.onkeydown = function(evt) {
     state = handler(state, evt.code);
  };
  // draw it the first time
  state = handler(state, "");
}

//----------------------

// from https://stackoverflow.com/questions/201183/how-to-determine-equality-for-two-javascript-objects
function objectEquals(x, y) {
    'use strict';

    if (x === null || x === undefined || y === null || y === undefined) { return x === y; }
    // after this just checking type of one would be enough
    if (x.constructor !== y.constructor) { return false; }
    // if they are functions, they should exactly refer to same one (because of closures)
    if (x instanceof Function) { return x === y; }
    // if they are regexps, they should exactly refer to same one (it is hard to better equality check on current ES)
    if (x instanceof RegExp) { return x === y; }
    if (x === y || x.valueOf() === y.valueOf()) { return true; }
    if (Array.isArray(x) && x.length !== y.length) { return false; }

    // if they are dates, they must had equal valueOf
    if (x instanceof Date) { return false; }

    // if they are strictly equal, they both need to be object at least
    if (!(x instanceof Object)) { return false; }
    if (!(y instanceof Object)) { return false; }

    // recursive object equality check
    var p = Object.keys(x);
    return Object.keys(y).every(function (i) { return p.indexOf(i) !== -1; }) &&
        p.every(function (i) { return objectEquals(x[i], y[i]); });
}
function check_assert(x, y, msg) {
  if (!objectEquals(x,y)) {
    var message = ['Error: ', msg, '\nExpected:', JSON.serialize(x), '\nGot:', JSON.serialize(y)].join();
    throw message;
  }
  else
    console.log('OK: ' + msg);
}
//
ats2jspre_the_print_store_clear();
my_dynload();
alert(ats2jspre_the_print_store_join());
//
/* ATSextcode_end() */

/* ****** ****** */

/* end-of-compilation-unit */
